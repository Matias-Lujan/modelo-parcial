ENTORNO CONFIG

inicializar proyecto (-y para autocompletado)
-npm init es6 -y
- "scripts": {
    "dev": "node --watch app.js"
  }

instalar Express para creacion de servidores http (framework Node.js) en el proyecto (necesario instalar en codigo). Lo mete en node_modules/
- npm install express --save
- import express from 'express';
- const server = express();
- export default server;

formateador de codigo Biome
- npm i -D -E @biomejs/biome instalar dependencia
- npx @biomejs/biome init archivo para configurar
- "scripts": {
    "linter:format": "npx @biomejs/biome format --write ./src app.js"
  }

mostrar por consola peticiones
- npm install morgan
- import morgan from 'morgan';
- const morganModule = morgan(':method :url :status :res[content-length] - :response-time ms');
- server.use(morganModule);

jsonwebtoken para manejo de token
- npm install jsonwebtoken
- import jwt from 'jsonwebtoken';

---------------------------------------------
.configurar server
import express from 'express';
const server = express();
export default server;

.configurar app.js
import server from "./src/server";
const PORT = 3001;
const HOST = '127.0.0.1';
server.listen(PORT, () => {
    console.log,(`Serving in: http://${HOST}:${PORT}`);
});

.src model
import { randomBytes } from 'crypto';
this.id = id ?? randomBytes(4).toString('hex'); 

.src repository
import fs from 'fs/promises';
constructor(path) {
    this.path = path;
  }

.src controller
import { DataBaseRepository } from '../repository/json.repository.js';
const database = new DataBaseRepository('database/ferreteria.db.json');

.ambiente test - Test Development Driven
endpoints en server.js para primera validacion de logica controllers y repository

.file routes
const movieRouter = express.Router();
const { createMovie, deleteMovie, getById, updateMovie } = MovieController;

movieRouter
  .get('/api/movie/:id', getById)
  .post('/api/movie/create', createMovie)
  .delete('/api/movie/delete/:id', deleteMovie)
  .patch('/api/movie/patch/:id', updateMovie);

export default movieRouter;

en server.js -> middleware de rutas de movies
server.use(movieRouter);